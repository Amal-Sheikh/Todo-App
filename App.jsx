// Importing necessary styles and libraries
import "./App.css";
import {FaEdit} from 'react-icons/fa';
import { AiFillDelete } from 'react-icons/ai'; // Corrected import
 import { useEffect, useState } from "react";
import Navbar from "./components/Navbar";
import { v4 as uuidv4 } from 'uuid';

function App() {
  // State to show/hide completed todos
  const [showFinished, setShowFinished] = useState(true);
  // State for current todo input
  const [todo, setTodo] = useState("");
  // State for the list of todos
  const [todos, setTodos] = useState([]);

  // Load todos from local storage on component mount
  useEffect(() => {
    let todoString = localStorage.getItem("todos");
    if (todoString) {
      let todos = JSON.parse(todoString);
      setTodos(todos);
    }
  }, []); // Empty dependency array means this runs once when the component mounts

  // Toggle the visibility of completed todos
  const toggleFinished = (e) => {
    setShowFinished(!showFinished); // Switch the boolean value
  };

  // Save todos to local storage
  const saveLocalStorage = () => {
    localStorage.setItem("todos", JSON.stringify(todos)); // Serialize todos and store them
  };

  // Handle edit logic 
  const handleEdit = (e, id) => {
    // i => i.id == id: It keeps only those todos whose ID is the one you want to edit
    let t = todos.filter(i => i.id === id); // Get the todo to be edited
    setTodo(t[0].todo); // Set the todo text to the input
    // phir usk baad edit mai  janay k baad neechay sai delete kr diyaa
    // item => item.id !== id: It keeps only those todos whose ID is not the one you want to delete
    let newTodos = todos.filter(item => item.id !== id); // Filter out the todo to delete
    // setTodos(newTodos): This updates the todos list to the new list without the deleted item.
    setTodos(newTodos); // Update todos state
  };

  // Handle the deletion of a todo item
  const handleDelete = (e, id) => {
    console.log("Deleting ID:", id); // Log the ID being deleted
    // item => item.id !== id: It keeps only those todos whose ID is not the one you want to delete
    let newTodos = todos.filter(item => item.id !== id); // Filter out the todo to delete
    // setTodos(newTodos): This updates the todos list to the new list without the deleted item.
    setTodos(newTodos); // Update state
    saveLocalStorage(); // Save updated todos to local storage
  };

  //   setTodos(...): This updates the list of todos.
  // [...todos, ...]: This keeps all the current todos and adds a new one.
  // { id: uuidv4(), todo, isCompleted: false }: This creates a new todo object with:
  // id: A unique ID generated by uuidv4().
  // todo: The text you typed in the input.
  // isCompleted: false: Starts as not completed.
  const handleAdd = () => {
    if (todo.trim() !== "") { // Ensure todo is not empty
      setTodos([...todos, { id: uuidv4(), todo, isCompleted: false }]); // Add new todo
      setTodo(""); //setTodo(""): This clears the input field after adding the todo.
      console.log(todos); // Log the current state of todos
    }
  };

  // Handle changes in the input field
  const handleChange = (e) => {
    setTodo(e.target.value); // Update todo state with input value
    saveLocalStorage(); // Save updated todos to local storage (consider removing if unnecessary)
  };

  // Handle checkbox change to mark todos as completed
  const handleCheckbox = (e) => {
    // e.target.name: This gets the name (ID) of the checkbox that was clicked.
    let id = e.target.name; // Get the ID of the checkbox clicked
    console.log("Checkbox ID:", id);
    let newTodos = todos.map(item => {
      if (item.id === id) { //  : This checks if the current todoâ€™s ID matches the checkbox ID.
        // return {...item, ...}: This creates a new todo object, copying all existing properties.
        // isCompleted: !item.isCompleted: This toggles the completion status.
        return { ...item, isCompleted: !item.isCompleted }; 
      }
      return item; // Return unchanged item if no match
    });
    setTodos(newTodos); // Update todos state
    console.log(newTodos); // Log updated todos
    saveLocalStorage(); // Save updated todos to local storage
  };

  return (
    <>
      <Navbar /> {/* Render the navigation bar */}
      <div className="container mx-auto my-5 rounded-xl py-3 bg-violet-100 min-h-[80vh] w-1/2">
      <h1 className="text-center font-bold text-xl">ITask - Manage your Todos at one place</h1>
      <div className="addTodo mx-4 flex flex-col gap-4">
  <h2 className="text-lg font-bold text-purple-950 my-2">Add a Todo</h2>
  
  {/* Input field for adding todos */}
  <input 
    onChange={handleChange} 
    value={todo} 
    type="text" 
    className="rounded-full px-5 py-1 border-blue-900 w-full max-w-full overflow-hidden whitespace-nowrap text-ellipsis" 
    placeholder="Enter your todo here..." 
  />
  
  {/* Button to add the todo */}
  <button 
    onClick={handleAdd} 
    disabled={todo.length <= 3} 
    className="bg-violet-800 rounded-full py-1 hover:bg-violet-950 p-2 text-sm font-bold text-white disabled:bg-purple-800"
  >
    Add
  </button>
</div>

        <input className="mx-4 my-4" type="checkbox" onChange={toggleFinished} checked={showFinished} /> showFinished {/* Toggle show/hide completed todos */}
        <div className="mx-4">
          <h2 className="text-lg font-bold text-purple-950">Your Todos</h2>
          <div className="todos">
          {todos.length === 0 && <div>No todos to display</div>} {/* Display message if no todos */}
{todos.map(item => (
  (showFinished || !item.isCompleted) && ( // Check if we should show finished todos
    <div key={item.id} className="todo flex w-full my-3 justify-between">
      <div className="flex gap-5">
        <input name={item.id} onChange={handleCheckbox} type="checkbox" checked={item.isCompleted} />
      </div>
      <div className={item.isCompleted ? "line-through" : ""}>{item.todo}</div> {/* Strikethrough if completed */}
      <div className="buttons mx-5">
        <button onClick={(e) => { handleEdit(e, item.id); }} className="bg-violet-800 mx-1 rounded-md hover:bg-violet-950 text-white p-2 py-1 text-sm font-bold"><FaEdit/></button>
        <button onClick={(e) => { handleDelete(e, item.id); }} className="bg-violet-800 mx-1 rounded-md hover:bg-violet-950 text-white p-2 py-1 text-sm font-bold">
          <AiFillDelete/>
        </button>
      </div>
    </div>
  )
))}


          </div>
        </div>
      </div>
    </>
  );
}

export default App;
